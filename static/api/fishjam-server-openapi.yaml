# This file has been generated using OpenApiSpex. Do not edit manually!
# Run `mix api.spec` to regenerate

---
components:
  responses: {}
  schemas:
    User:
      description: Description of the user state
      properties:
        token:
          description: User token, has to be in UUID format
          example: fe639397-641c-4e78-aafd-64786fc320ba
          type: string
          x-struct:
          x-validate:
        user_id:
          description: User ID
          example: Charles
          type: string
          x-struct:
          x-validate:
      required:
        - user_id
        - token
      title: User
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.User
      x-validate:
    PeerRefreshTokenResponse:
      description: Response containing new peer token
      properties:
        data:
          properties:
            token:
              $ref: "#/components/schemas/AuthToken"
          required:
            - token
          type: object
          x-struct:
          x-validate:
      required:
        - data
      title: PeerRefreshTokenResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.PeerRefreshTokenResponse
      x-validate:
    ComponentHLS:
      description: Describes the HLS component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
          x-struct:
          x-validate:
        properties:
          $ref: "#/components/schemas/ComponentPropertiesHLS"
        tracks:
          description: List of all component's tracks
          items:
            $ref: "#/components/schemas/Track"
          type: array
          x-struct:
          x-validate:
        type:
          description: Component type
          example: hls
          type: string
          x-struct:
          x-validate:
      required:
        - id
        - type
        - properties
        - tracks
      title: ComponentHLS
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.HLS
      x-validate:
    ComponentOptions:
      description: Component-specific options
      oneOf:
        - $ref: "#/components/schemas/ComponentOptionsHLS"
        - $ref: "#/components/schemas/ComponentOptionsRTSP"
        - $ref: "#/components/schemas/ComponentOptionsFile"
        - $ref: "#/components/schemas/ComponentOptionsSIP"
        - $ref: "#/components/schemas/ComponentOptionsRecording"
      title: ComponentOptions
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.Options
      x-validate:
    ComponentDetailsResponse:
      description: Response containing component details
      properties:
        data:
          $ref: "#/components/schemas/Component"
      required:
        - data
      title: ComponentDetailsResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.ComponentDetailsResponse
      x-validate:
    RoomDetailsResponse:
      description: Response containing room details
      properties:
        data:
          $ref: "#/components/schemas/Room"
      required:
        - data
      title: RoomDetailsResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.RoomDetailsResponse
      x-validate:
    RoomCreateDetailsResponse:
      description: Response containing room details
      properties:
        data:
          properties:
            fishjam_address:
              description: Fishjam instance address where the room was created. This might be different than the address of Fishjam where the request was sent only when running a cluster of Fishjams.
              example: fishjam1:5003
              type: string
              x-struct:
              x-validate:
            room:
              $ref: "#/components/schemas/Room"
          required:
            - room
            - fishjam_address
          type: object
          x-struct:
          x-validate:
      required:
        - data
      title: RoomCreateDetailsResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.RoomCreateDetailsResponse
      x-validate:
    Room:
      description: Description of the room state
      properties:
        components:
          description: List of all components
          items:
            $ref: "#/components/schemas/Component"
          type: array
          x-struct:
          x-validate:
        config:
          $ref: "#/components/schemas/RoomConfig"
        id:
          description: Room ID
          example: room-1
          type: string
          x-struct:
          x-validate:
        peers:
          description: List of all peers
          items:
            $ref: "#/components/schemas/Peer"
          type: array
          x-struct:
          x-validate:
      required:
        - id
        - config
        - components
        - peers
      title: Room
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Room
      x-validate:
    PeerType:
      description: Peer type
      example: webrtc
      title: PeerType
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.Type
      x-validate:
    ComponentPropertiesRecording:
      description: Properties specific to the Recording component
      properties:
        subscribeMode:
          description: Whether the Recording component should subscribe to tracks automatically or manually
          enum:
            - auto
            - manual
          type: string
          x-struct:
          x-validate:
      required:
        - subscribeMode
      title: ComponentPropertiesRecording
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.Recording.Properties
      x-validate:
    ComponentOptionsRecording:
      description: Options specific to the Recording component
      properties:
        credentials:
          description: An AWS S3 credential that will be used to send HLS stream. The stream will only be uploaded if credentials are provided
          nullable: true
          properties:
            accessKeyId:
              description: An AWS access key identifier, linked to your AWS account.
              type: string
              x-struct:
              x-validate:
            bucket:
              description: The name of the S3 bucket where your data will be stored.
              type: string
              x-struct:
              x-validate:
            region:
              description: The AWS region where your bucket is located.
              type: string
              x-struct:
              x-validate:
            secretAccessKey:
              description: The secret key that is linked to the Access Key ID.
              type: string
              x-struct:
              x-validate:
          required:
            - accessKeyId
            - secretAccessKey
            - region
            - bucket
          title: S3Credentials
          type: object
          x-struct: Elixir.FishjamWeb.ApiSpec.Component.HLS.S3
          x-validate:
        pathPrefix:
          description: Path prefix under which all recording are stored
          nullable: true
          type: string
          x-struct:
          x-validate:
        subscribeMode:
          default: auto
          description: Whether the Recording component should subscribe to tracks automatically or manually.
          enum:
            - auto
            - manual
          type: string
          x-struct:
          x-validate:
      title: ComponentOptionsRecording
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.Recording.Options
      x-validate:
    Error:
      description: Error message
      properties:
        errors:
          description: Error details
          example: Token has expired
          type: string
          x-struct:
          x-validate:
      required:
        - errors
      title: Error
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Error
      x-validate:
    PeerDetailsResponse:
      description: Response containing peer details and their token
      properties:
        data:
          properties:
            peer:
              $ref: "#/components/schemas/Peer"
            peer_websocket_url:
              $ref: "#/components/schemas/WebsocketURL"
            token:
              $ref: "#/components/schemas/AuthToken"
          required:
            - peer
            - token
          type: object
          x-struct:
          x-validate:
      required:
        - data
      title: PeerDetailsResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.PeerDetailsResponse
      x-validate:
    AuthToken:
      description: Token for authorizing websocket connection
      example: 5cdac726-57a3-4ecb-b1d5-72a3d62ec242
      title: AuthToken
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.Token
      x-validate:
    PeerStatus:
      description: Informs about the peer status
      enum:
        - connected
        - disconnected
      example: disconnected
      title: PeerStatus
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.Status
      x-validate:
    PeerOptions:
      description: Peer-specific options
      oneOf:
        - $ref: "#/components/schemas/PeerOptionsWebRTC"
      title: PeerOptions
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.Options
      x-validate:
    NodeStatus:
      description: Informs about the status of node
      properties:
        gitCommit:
          description: Commit hash of the build
          type: string
          x-struct:
          x-validate:
        nodeName:
          description: Name of the node
          type: string
          x-struct:
          x-validate:
        status:
          description: Informs about the status of Fishjam or a specific service
          enum:
            - UP
            - DOWN
          type: string
          x-struct:
          x-validate:
        uptime:
          description: Uptime of Fishjam (in seconds)
          type: integer
          x-struct:
          x-validate:
        version:
          description: Version of Fishjam
          type: string
          x-struct:
          x-validate:
      required:
        - status
        - version
        - uptime
        - nodeName
        - gitCommit
      title: NodeStatus
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.HealthReport.NodeStatus
      x-validate:
    ComponentOptionsRTSP:
      description: Options specific to the RTSP component
      properties:
        keepAliveInterval:
          default: 15000
          description: Interval (in ms) in which keep-alive RTSP messages will be sent to the remote stream source
          minimum: 0
          type: integer
          x-struct:
          x-validate:
        pierceNat:
          default: true
          description: Whether to attempt to create client-side NAT binding by sending an empty datagram from client to source, after the completion of RTSP setup
          type: boolean
          x-struct:
          x-validate:
        reconnectDelay:
          default: 15000
          description: Delay (in ms) between successive reconnect attempts
          minimum: 0
          type: integer
          x-struct:
          x-validate:
        rtpPort:
          default: 20000
          description: Local port RTP stream will be received at
          maximum: 65535
          minimum: 1
          type: integer
          x-struct:
          x-validate:
        sourceUri:
          description: URI of RTSP source stream
          example: rtsp://localhost:554/stream
          type: string
          x-struct:
          x-validate:
      required:
        - sourceUri
      title: ComponentOptionsRTSP
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.RTSP.Options
      x-validate:
    ComponentOptionsFile:
      description: Options specific to the File component
      properties:
        filePath:
          description: Path to track file. Must be either opus encapsulated in Ogg or raw h264
          example: /root/video.h264
          type: string
          x-struct:
          x-validate:
        framerate:
          description: Framerate of video in a file. It is only valid for video track
          example: 30
          nullable: true
          type: integer
          x-struct:
          x-validate:
      required:
        - filePath
      title: ComponentOptionsFile
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.File.Options
      x-validate:
    ComponentPropertiesRTSP:
      description: Properties specific to the RTSP component
      properties:
        keepAliveInterval:
          description: Interval (in ms) in which keep-alive RTSP messages will be sent to the remote stream source
          type: integer
          x-struct:
          x-validate:
        pierceNat:
          description: Whether to attempt to create client-side NAT binding by sending an empty datagram from client to source, after the completion of RTSP setup
          type: boolean
          x-struct:
          x-validate:
        reconnectDelay:
          description: Delay (in ms) between successive reconnect attempts
          type: integer
          x-struct:
          x-validate:
        rtpPort:
          description: Local port RTP stream will be received at
          type: integer
          x-struct:
          x-validate:
        sourceUri:
          description: URI of RTSP source stream
          type: string
          x-struct:
          x-validate:
      required:
        - sourceUri
        - rtpPort
        - reconnectDelay
        - keepAliveInterval
        - pierceNat
      title: ComponentPropertiesRTSP
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.RTSP.Properties
      x-validate:
    SubscriptionConfig:
      description: Subscription config
      properties:
        origins:
          description: List of peers and components ids whose tracks the HLS endpoint will subscribe to
          items:
            type: string
            x-struct:
            x-validate:
          type: array
          x-struct:
          x-validate:
      title: SubscriptionConfig
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Subscription.Origins
      x-validate:
    ComponentPropertiesHLS:
      description: Properties specific to the HLS component
      properties:
        lowLatency:
          description: Whether the component uses LL-HLS
          type: boolean
          x-struct:
          x-validate:
        persistent:
          description: Whether the video is stored after end of stream
          type: boolean
          x-struct:
          x-validate:
        playable:
          description: Whether the generated HLS playlist is playable
          type: boolean
          x-struct:
          x-validate:
        subscribeMode:
          description: Whether the HLS component should subscribe to tracks automatically or manually
          enum:
            - auto
            - manual
          type: string
          x-struct:
          x-validate:
        targetWindowDuration:
          description: Duration of stream available for viewer
          nullable: true
          type: integer
          x-struct:
          x-validate:
      required:
        - playable
        - lowLatency
        - persistent
        - targetWindowDuration
        - subscribeMode
      title: ComponentPropertiesHLS
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.HLS.Properties
      x-validate:
    SIPCredentials:
      description: Credentials used to authorize in SIP Provider service
      properties:
        address:
          description: "SIP provider address. Can be in the form of FQDN (my-sip-registrar.net) or IPv4 (1.2.3.4). Port can be specified e.g: 5.6.7.8:9999. If not given, the default SIP port `5060` will be assumed"
          example: example.org
          type: string
          x-struct:
          x-validate:
        password:
          description: Password in SIP service provider
          type: string
          x-struct:
          x-validate:
        username:
          description: Username in SIP service provider
          type: string
          x-struct:
          x-validate:
      required:
        - address
        - username
        - password
      title: SIPCredentials
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.SIP.SIPCredentials
      x-validate:
    UserListingResponse:
      description: Response containing list of all users
      properties:
        data:
          items:
            $ref: "#/components/schemas/User"
          type: array
          x-struct:
          x-validate:
      required:
        - data
      title: UserListingResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.UserListingResponse
      x-validate:
    HlsMsn:
      description: Segment sequence number
      example: 10
      minimum: 0
      nullable: true
      title: HlsMsn
      type: integer
      x-struct: Elixir.FishjamWeb.ApiSpec.HLS.Params.HlsMsn
      x-validate:
    ShutdownStatusResponse:
      description: Returns status information for the shutdown process of Fishjam
      properties:
        data:
          $ref: "#/components/schemas/ShutdownStatus"
      required:
        - data
      title: ShutdownStatusResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.ShutdownStatusResponse
      x-validate:
    Component:
      description: Describes component
      discriminator:
        mapping:
          file: "#/components/schemas/ComponentFile"
          hls: "#/components/schemas/ComponentHLS"
          recording: "#/components/schemas/ComponentRecording"
          rtsp: "#/components/schemas/ComponentRTSP"
          sip: "#/components/schemas/ComponentSIP"
        propertyName: type
      oneOf:
        - $ref: "#/components/schemas/ComponentHLS"
        - $ref: "#/components/schemas/ComponentRTSP"
        - $ref: "#/components/schemas/ComponentFile"
        - $ref: "#/components/schemas/ComponentSIP"
        - $ref: "#/components/schemas/ComponentRecording"
      title: Component
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component
      x-validate:
    S3Credentials:
      description: An AWS S3 credential that will be used to send HLS stream. The stream will only be uploaded if credentials are provided
      nullable: true
      properties:
        accessKeyId:
          description: An AWS access key identifier, linked to your AWS account.
          type: string
          x-struct:
          x-validate:
        bucket:
          description: The name of the S3 bucket where your data will be stored.
          type: string
          x-struct:
          x-validate:
        region:
          description: The AWS region where your bucket is located.
          type: string
          x-struct:
          x-validate:
        secretAccessKey:
          description: The secret key that is linked to the Access Key ID.
          type: string
          x-struct:
          x-validate:
      required:
        - accessKeyId
        - secretAccessKey
        - region
        - bucket
      title: S3Credentials
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.HLS.S3
      x-validate:
    WebsocketURL:
      description: Websocket URL to which peer has to connect
      example: www.fishjam.org/socket/peer
      title: WebsocketURL
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.WebSocketUrl
      x-validate:
    ViewerToken:
      description: Token for authorizing broadcaster viewer connection
      properties:
        token:
          example: 5cdac726-57a3-4ecb-b1d5-72a3d62ec242
          type: string
          x-struct:
          x-validate:
      required:
        - token
      title: ViewerToken
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Viewer.Token
      x-validate:
    ComponentFile:
      description: Describes the File component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
          x-struct:
          x-validate:
        properties:
          $ref: "#/components/schemas/ComponentPropertiesFile"
        tracks:
          description: List of all component's tracks
          items:
            $ref: "#/components/schemas/Track"
          type: array
          x-struct:
          x-validate:
        type:
          description: Component type
          example: file
          type: string
          x-struct:
          x-validate:
      required:
        - id
        - type
        - tracks
      title: ComponentFile
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.File
      x-validate:
    ShutdownStatus:
      description: Returns status information for the shutdown process of Fishjam.
      properties:
        node_busy:
          description: Informs if node is busy and cannot be shutdown
          type: boolean
          x-struct:
          x-validate:
      required:
        - node_busy
      title: ShutdownStatus
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.ShutdownStatus
      x-validate:
    ComponentPropertiesFile:
      description: Properties specific to the File component
      properties:
        filePath:
          description: Relative path to track file. Must be either opus encapsulated in Ogg or raw h264
          type: string
          x-struct:
          x-validate:
        framerate:
          description: Framerate of video in a file. It is only valid for video track
          example: 30
          nullable: true
          type: integer
          x-struct:
          x-validate:
      required:
        - filePath
        - framerate
      title: ComponentPropertiesFile
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.File.Properties
      x-validate:
    RoomConfig:
      description: Room configuration
      properties:
        maxPeers:
          description: Maximum amount of peers allowed into the room
          example: 10
          minimum: 0
          nullable: true
          type: integer
          x-struct:
          x-validate:
        public:
          default: false
          description: True if livestream viewers can omit specifying a token.
          nullable: false
          type: boolean
          x-struct:
          x-validate:
        roomType:
          default: conference
          description: The use-case of the room. If not provided, this defaults to conference.
          enum:
            - full_feature
            - audio_only
            - broadcaster
            - livestream
            - conference
          nullable: false
          type: string
          x-struct:
          x-validate:
        videoCodec:
          description: Enforces video codec for each peer in the room
          enum:
            - h264
            - vp8
          nullable: true
          type: string
          x-struct:
          x-validate:
        webhookUrl:
          description: URL where Fishjam notifications will be sent
          example: https://backend.address.com/fishjam-notifications-endpoint
          nullable: true
          type: string
          x-struct:
          x-validate:
      title: RoomConfig
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Room.Config
      x-validate:
    PeerMetadata:
      description: Custom metadata set by the peer
      example:
        name: FishjamUser
      nullable: true
      title: PeerMetadata
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.PeerMetadata
      x-validate:
    ComponentOptionsHLS:
      description: Options specific to the HLS component
      properties:
        lowLatency:
          default: false
          description: Whether the component should use LL-HLS
          type: boolean
          x-struct:
          x-validate:
        persistent:
          default: false
          description: Whether the video is stored after end of stream
          type: boolean
          x-struct:
          x-validate:
        s3:
          description: An AWS S3 credential that will be used to send HLS stream. The stream will only be uploaded if credentials are provided
          nullable: true
          properties:
            accessKeyId:
              description: An AWS access key identifier, linked to your AWS account.
              type: string
              x-struct:
              x-validate:
            bucket:
              description: The name of the S3 bucket where your data will be stored.
              type: string
              x-struct:
              x-validate:
            region:
              description: The AWS region where your bucket is located.
              type: string
              x-struct:
              x-validate:
            secretAccessKey:
              description: The secret key that is linked to the Access Key ID.
              type: string
              x-struct:
              x-validate:
          required:
            - accessKeyId
            - secretAccessKey
            - region
            - bucket
          title: S3Credentials
          type: object
          x-struct: Elixir.FishjamWeb.ApiSpec.Component.HLS.S3
          x-validate:
        subscribeMode:
          default: auto
          description: Whether the HLS component should subscribe to tracks automatically or manually.
          enum:
            - auto
            - manual
          type: string
          x-struct:
          x-validate:
        targetWindowDuration:
          description: Duration of stream available for viewer
          nullable: true
          type: integer
          x-struct:
          x-validate:
      title: ComponentOptionsHLS
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.HLS.Options
      x-validate:
    HealthcheckResponse:
      description: Response containing health report of Fishjam
      properties:
        data:
          $ref: "#/components/schemas/HealthReport"
      required:
        - data
      title: HealthcheckResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.HealthcheckResponse
      x-validate:
    ComponentOptionsSIP:
      description: Options specific to the SIP component
      properties:
        registrarCredentials:
          description: Credentials used to authorize in SIP Provider service
          properties:
            address:
              description: "SIP provider address. Can be in the form of FQDN (my-sip-registrar.net) or IPv4 (1.2.3.4). Port can be specified e.g: 5.6.7.8:9999. If not given, the default SIP port `5060` will be assumed"
              example: example.org
              type: string
              x-struct:
              x-validate:
            password:
              description: Password in SIP service provider
              type: string
              x-struct:
              x-validate:
            username:
              description: Username in SIP service provider
              type: string
              x-struct:
              x-validate:
          required:
            - address
            - username
            - password
          title: SIPCredentials
          type: object
          x-struct: Elixir.FishjamWeb.ApiSpec.Component.SIP.SIPCredentials
          x-validate:
      required:
        - registrarCredentials
      title: ComponentOptionsSIP
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.SIP.Options
      x-validate:
    HlsResponse:
      description: Requested file
      title: HlsResponse
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.HLS.Response
      x-validate:
    DialConfig:
      description: Dial config
      properties:
        phoneNumber:
          description: Phone number on which SIP Component will call
          type: string
          x-struct:
          x-validate:
      title: DialConfig
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Dial.PhoneNumber
      x-validate:
    HealthReport:
      description: Describes overall Fishjam health
      properties:
        distributionEnabled:
          description: Cluster distribution enabled/disabled
          type: boolean
          x-struct:
          x-validate:
        localStatus:
          $ref: "#/components/schemas/NodeStatus"
        nodesInCluster:
          description: Number of nodes in cluster
          type: integer
          x-struct:
          x-validate:
        nodesStatus:
          description: Status of each node in cluster
          items:
            $ref: "#/components/schemas/NodeStatus"
          type: array
          x-struct:
          x-validate:
      required:
        - localStatus
        - nodesInCluster
        - distributionEnabled
        - nodesStatus
      title: HealthReport
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.HealthReport
      x-validate:
    HlsSkip:
      description: Set to "YES" if delta manifest should be requested
      example: YES
      nullable: true
      title: HlsSkip
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.HLS.Params.HlsSkip
      x-validate:
    Peer:
      description: Describes peer status
      properties:
        id:
          description: Assigned peer id
          example: peer-1
          type: string
          x-struct:
          x-validate:
        metadata:
          $ref: "#/components/schemas/PeerMetadata"
        status:
          $ref: "#/components/schemas/PeerStatus"
        tracks:
          description: List of all peer's tracks
          items:
            $ref: "#/components/schemas/Track"
          type: array
          x-struct:
          x-validate:
        type:
          $ref: "#/components/schemas/PeerType"
      required:
        - id
        - type
        - status
        - tracks
        - metadata
      title: Peer
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer
      x-validate:
    HlsPart:
      description: Partial segment sequence number
      example: 10
      minimum: 0
      nullable: true
      title: HlsPart
      type: integer
      x-struct: Elixir.FishjamWeb.ApiSpec.HLS.Params.HlsPart
      x-validate:
    ComponentPropertiesSIP:
      description: Properties specific to the SIP component
      properties:
        registrarCredentials:
          description: Credentials used to authorize in SIP Provider service
          properties:
            address:
              description: "SIP provider address. Can be in the form of FQDN (my-sip-registrar.net) or IPv4 (1.2.3.4). Port can be specified e.g: 5.6.7.8:9999. If not given, the default SIP port `5060` will be assumed"
              example: example.org
              type: string
              x-struct:
              x-validate:
            password:
              description: Password in SIP service provider
              type: string
              x-struct:
              x-validate:
            username:
              description: Username in SIP service provider
              type: string
              x-struct:
              x-validate:
          required:
            - address
            - username
            - password
          title: SIPCredentials
          type: object
          x-struct: Elixir.FishjamWeb.ApiSpec.Component.SIP.SIPCredentials
          x-validate:
      required:
        - registrarCredentials
      title: ComponentPropertiesSIP
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.SIP.Properties
      x-validate:
    ComponentType:
      description: Component type
      example: hls
      title: ComponentType
      type: string
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.Type
      x-validate:
    BroadcasterVerifyTokenResponse:
      description: Response containing verification information
      properties:
        data:
          properties:
            authenticated:
              type: boolean
              x-struct:
              x-validate:
            streamId:
              type: string
              x-struct:
              x-validate:
          required:
            - authenticated
          type: object
          x-struct:
          x-validate:
      required:
        - data
      title: BroadcasterVerifyTokenResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.BroadcasterVerifyTokenResponse
      x-validate:
    PeerOptionsWebRTC:
      description: Options specific to the WebRTC peer
      properties:
        enableSimulcast:
          default: true
          description: Enables the peer to use simulcast
          type: boolean
          x-struct:
          x-validate:
        metadata:
          additionalProperties: true
          description: Custom peer metadata
          type: object
          x-struct:
          x-validate:
      title: PeerOptionsWebRTC
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Peer.WebRTC
      x-validate:
    RoomsListingResponse:
      description: Response containing list of all rooms
      properties:
        data:
          items:
            $ref: "#/components/schemas/Room"
          type: array
          x-struct:
          x-validate:
      required:
        - data
      title: RoomsListingResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.RoomsListingResponse
      x-validate:
    ComponentSIP:
      description: Describes the SIP component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
          x-struct:
          x-validate:
        properties:
          $ref: "#/components/schemas/ComponentPropertiesSIP"
        tracks:
          description: List of all component's tracks
          items:
            $ref: "#/components/schemas/Track"
          type: array
          x-struct:
          x-validate:
        type:
          description: Component type
          example: sip
          type: string
          x-struct:
          x-validate:
      required:
        - id
        - type
        - properties
        - tracks
      title: ComponentSIP
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.SIP
      x-validate:
    ComponentRecording:
      description: Describes the Recording component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
          x-struct:
          x-validate:
        properties:
          $ref: "#/components/schemas/ComponentPropertiesRecording"
        tracks:
          description: List of all component's tracks
          items:
            $ref: "#/components/schemas/Track"
          type: array
          x-struct:
          x-validate:
        type:
          description: Component type
          example: recording
          type: string
          x-struct:
          x-validate:
      required:
        - id
        - type
        - properties
        - tracks
      title: ComponentRecording
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.Recording
      x-validate:
    StreamerToken:
      description: Token for authorizing broadcaster streamer connection
      properties:
        token:
          example: 5cdac726-57a3-4ecb-b1d5-72a3d62ec242
          type: string
          x-struct:
          x-validate:
      required:
        - token
      title: StreamerToken
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Streamer.Token
      x-validate:
    Track:
      description: Describes media track of a Peer or Component
      properties:
        id:
          type: string
          x-struct:
          x-validate:
        metadata:
          nullable: true
          x-struct:
          x-validate:
        type:
          enum:
            - audio
            - video
          type: string
          x-struct:
          x-validate:
      title: Track
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Track
      x-validate:
    ComponentRTSP:
      description: Describes the RTSP component
      properties:
        id:
          description: Assigned component ID
          example: component-1
          type: string
          x-struct:
          x-validate:
        properties:
          $ref: "#/components/schemas/ComponentPropertiesRTSP"
        tracks:
          description: List of all component's tracks
          items:
            $ref: "#/components/schemas/Track"
          type: array
          x-struct:
          x-validate:
        type:
          description: Component type
          example: hls
          type: string
          x-struct:
          x-validate:
      required:
        - id
        - type
        - properties
        - tracks
      title: ComponentRTSP
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.Component.RTSP
      x-validate:
    RecordingListResponse:
      description: Response containing list of all recording
      properties:
        data:
          items:
            type: string
            x-struct:
            x-validate:
          type: array
          x-struct:
          x-validate:
      required:
        - data
      title: RecordingListResponse
      type: object
      x-struct: Elixir.FishjamWeb.ApiSpec.RecordingListResponse
      x-validate:
  securitySchemes:
    authorization:
      scheme: bearer
      type: http
info:
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Fishjam Media Server
  version: 0.20.0
openapi: 3.0.0
paths:
  /admin/health:
    get:
      callbacks: {}
      operationId: healthcheck
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthcheckResponse"
          description: Healthy
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
      security:
        - authorization: []
      summary: Describes the health of Fishjam
      tags:
        - health
  /admin/shutdown/drain:
    post:
      callbacks: {}
      operationId: drain_node
      parameters: []
      responses:
        "200":
          description: Node marked as draining.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
      security:
        - authorization: []
      summary: Marks node as draining, making it the last in the load balancing order.
      tags: []
  /admin/shutdown/status:
    get:
      callbacks: {}
      operationId: shutdown_status
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShutdownStatusResponse"
          description: Shutdown status
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
      security:
        - authorization: []
      summary: Returns status information for the shutdown process of Fishjam.
      tags: []
  /admin/user:
    get:
      callbacks: {}
      operationId: get_all_users
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListingResponse"
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Show information about all users
      tags:
        - user
    post:
      callbacks: {}
      operationId: create_user
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: User token
          in: path
          name: token
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "201":
          description: User created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Creates user with provided user id and token
      tags:
        - user
  /admin/user/{id}:
    delete:
      callbacks: {}
      operationId: delete_user
      parameters:
        - description: User id
          in: path
          name: id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "204":
          description: Successfully deleted user
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Removes user with provided user id
      tags:
        - user
  /broadcaster/verify/{token}:
    get:
      callbacks: {}
      operationId: verify_token
      parameters:
        - description: Token
          in: path
          name: token
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BroadcasterVerifyTokenResponse"
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
      summary: Verify token provided by broadcaster
      tags:
        - broadcaster
  /hls/{room_id}/{filename}:
    get:
      callbacks: {}
      operationId: getHlsContent
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Name of the file
          in: path
          name: filename
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Byte range of partial segment
          in: header
          name: range
          required: false
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Segment sequence number
          in: query
          name: _HLS_msn
          required: false
          schema:
            $ref: "#/components/schemas/HlsMsn"
        - description: Partial segment sequence number
          in: query
          name: _HLS_part
          required: false
          schema:
            $ref: "#/components/schemas/HlsPart"
        - description: Is delta manifest requested
          in: query
          name: _HLS_skip
          required: false
          schema:
            $ref: "#/components/schemas/HlsSkip"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HlsResponse"
          description: File was found
        "301":
          description: Resource available on another Fishjam instance
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid filename
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: File not found
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      summary: Retrieve HLS Content
      tags:
        - hls
  /notifications:
    post:
      callbacks: {}
      operationId: notification
      parameters: []
      responses:
        "204":
          description: Successfully handled notification
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
      summary: Handle notification from broadcaster
      tags: []
  /recording:
    get:
      callbacks: {}
      operationId: get_recordings
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordingListResponse"
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unable to obtain recordings
      security:
        - authorization: []
      summary: Lists all available recordings
      tags:
        - recording
  /recording/{recording_id}:
    delete:
      callbacks: {}
      operationId: delete_recording
      parameters:
        - description: Recording id
          in: path
          name: recording_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "204":
          description: Successfully deleted recording
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid recording
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Recording doesn't exist
      security:
        - authorization: []
      summary: Deletes the recording
      tags:
        - recording
  /recording/{recording_id}/{filename}:
    get:
      callbacks: {}
      operationId: getRecordingContent
      parameters:
        - description: Recording id
          in: path
          name: recording_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Name of the file
          in: path
          name: filename
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HlsResponse"
          description: File was found
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: File not found
      summary: Retrieve Recording (HLS) Content
      tags:
        - recording
  /room:
    get:
      callbacks: {}
      operationId: get_all_rooms
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomsListingResponse"
          description: Success
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
      security:
        - authorization: []
      summary: Show information about all rooms
      tags:
        - room
    post:
      callbacks: {}
      operationId: create_room
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomConfig"
        description: Room configuration
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomCreateDetailsResponse"
          description: Room successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Creates a room
      tags:
        - room
  /room/{room_id}:
    delete:
      callbacks: {}
      operationId: delete_room
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "204":
          description: Successfully deleted room
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Delete the room
      tags:
        - room
    get:
      callbacks: {}
      operationId: get_room
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomDetailsResponse"
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Shows information about the room
      tags:
        - room
  /room/{room_id}/component:
    post:
      callbacks: {}
      operationId: add_component
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  $ref: "#/components/schemas/ComponentOptions"
                type:
                  $ref: "#/components/schemas/ComponentType"
              required:
                - type
              type: object
              x-struct:
              x-validate:
        description: Component config
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComponentDetailsResponse"
          description: Successfully added component
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Creates the component and adds it to the room
      tags:
        - room
  /room/{room_id}/component/{component_id}/subscribe:
    post:
      callbacks: {}
      operationId: subscribe_to
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Component ID
          in: path
          name: component_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubscriptionConfig"
        description: Subscribe configuration
        required: false
      responses:
        "201":
          description: Tracks succesfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Subscribe component to the tracks of peers or components
      tags:
        - room
  /room/{room_id}/component/{id}:
    delete:
      callbacks: {}
      operationId: delete_component
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Component ID
          in: path
          name: id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "204":
          description: Successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Either component or the room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Delete the component from the room
      tags:
        - room
  /room/{room_id}/peer:
    post:
      callbacks: {}
      operationId: add_peer
      parameters:
        - description: Room id
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                options:
                  $ref: "#/components/schemas/PeerOptions"
                type:
                  $ref: "#/components/schemas/PeerType"
              required:
                - type
                - options
              type: object
              x-struct:
              x-validate:
        description: Peer specification
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeerDetailsResponse"
          description: Peer successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request body structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Create peer
      tags:
        - room
  /room/{room_id}/peer/{id}:
    delete:
      callbacks: {}
      operationId: delete_peer
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Peer id
          in: path
          name: id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "204":
          description: Peer successfully deleted
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request body structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room ID or Peer ID references a resource that doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Delete peer
      tags:
        - room
  /room/{room_id}/peer/{id}/refresh_token:
    post:
      callbacks: {}
      operationId: refresh_token
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: Peer id
          in: path
          name: id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PeerRefreshTokenResponse"
          description: Token successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request body structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room ID or Peer ID references a resource that doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Refresh peer token
      tags:
        - room
  /room/{room_id}/streamer:
    post:
      callbacks: {}
      operationId: generate_streamer_token
      parameters:
        - description: ID of the stream.
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StreamerToken"
          description: Token successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request body structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      summary: Generate a token that can be used by a streamer to start streaming
      tags:
        - streamer
  /room/{room_id}/viewer:
    post:
      callbacks: {}
      operationId: generate_viewer_token
      parameters:
        - description: ID of the stream.
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewerToken"
          description: Token successfully created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request body structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      summary: Generates token that a viewer can use to watch a livestream
      tags:
        - viewer
  /sip/{room_id}/{component_id}/call:
    delete:
      callbacks: {}
      operationId: end_call
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: SIP Component ID
          in: path
          name: component_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      responses:
        "201":
          description: Call ended
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Finish call made by SIP component
      tags:
        - sip
    post:
      callbacks: {}
      operationId: dial
      parameters:
        - description: Room ID
          in: path
          name: room_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
        - description: SIP Component ID
          in: path
          name: component_id
          required: true
          schema:
            type: string
            x-struct:
            x-validate:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DialConfig"
        description: Phone Number configuration
        required: false
      responses:
        "201":
          description: Call started
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid request structure
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Room doesn't exist
        "503":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Service temporarily unavailable
      security:
        - authorization: []
      summary: Make a call from the SIP component to the provided phone number
      tags:
        - sip
security: []
servers: []
tags: []
